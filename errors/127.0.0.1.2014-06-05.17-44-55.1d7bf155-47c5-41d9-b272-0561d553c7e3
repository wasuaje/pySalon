(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: '94http://localhost:8000/pysalon/pos/det_del?det_id=217'"
p3
sS'layer'
p4
S'/home/wasuaje/Documentos/desarrollo/web2py6/applications/pysalon/controllers/pos.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n### required - do no delete\n#import json\nimport math \ntry:\n    import simplejson as json\nexcept (ImportError,):\n    import json\n\ndef user(): return dict(form=auth())\ndef download(): return response.download(request,db)\ndef call(): return service()\n### end requires\n@auth.requires_login()\ndef index():\t\n\t\n\t#\n\t#seleccion de tipos de pago\n\t#\n\trow=db(db.fc_forma_pago.id > 0).select()\n\tlis_fp=[]\n\tfor row in row:\n\t\tlis_fp.append(XML("<button data-target=\'#myModal\' data-toggle=\'modal\' class=\'btn btn-outline btn-default\' onclick=\'set_fp(this.id)\' id=fp_%s type=\'button\'>%s</button>" % (row.id,row.nombre) ) )\t\n\tlis_fp.append(SPAN("                "))\n\tlis_fp.append(XML("<button class=\'btn btn-outline btn-danger btn-xs\' onclick=\'del_cobro();\' type=\'button\'>Elimina</button>"))\n\t#\n\t#Seleccion de categorias de productos para mostrar\n\t#\n\trow=db(db.in_categoria.id > 0).select()\n\tlis_cat=[]\n\tfor row in row:\n\t\t#url=A(row.nombre,_href="#",_onclick="get_productos();")\n\t\tlis_cat.append(XML("<button onclick=\'get_productos(this.id);\' class=\'btn btn-outline btn-default\' id=%s type=\'button\'>%s</button>" % (row.id,row.nombre) ) )\n\n\t \n\t#armo los selects para eleccion de clientes y especialistas\n\tfld_cliente=SELECT(_id=\'sel-clientes\',*[OPTION(s.nombre, _value=s.id) for s in db(db.cf_cliente).select()])\n\tfld_persona=SELECT(_id=\'sel-personas\',*[OPTION(s.nombres+\', \'+s.apellidos, _value=s.id) for s in db(db.cf_persona).select()])\n\t\n\t#form para agregar rapidamente clientes nuevos escondidos en un modal\n\tform_cliente=TABLE(TR("RIF.",INPUT(_id=\'rif\', type="text")),\n\t\t\t\t\t\tTR("Nombre:",INPUT(_id=\'nom_cliente\', type="text")),\n\t\t\t\t\t\tTR("Juridico", SELECT(OPTION(\'S\',_value=1),OPTION(\'N\',_value=0),_id=\'juridico\')),\n\t\t\t\t\t\t)\n\n\tprueba="""\n\t<table id="mitabla2" style=".selected{color:red;}" class="table table-striped table-bordered table-hover" cellspacing="0" width="100%">\n        <thead>\n            <tr>\n            \t<th>Id</th>\n                <th>Producto</th>\n                <th>Importe</th>                \n            </tr>\n        </thead>         \n        <tbody>\n        </tbody>\n        </table>\n        """\n\n\tmytabla=XML(prueba)\n\n\n\treturn dict(mytabla=mytabla,categorias=DIV(lis_cat),tipos_pago=DIV(lis_fp),fld_cliente=fld_cliente,fld_persona=fld_persona,form_cliente=form_cliente)\n\n\ndef get_productos():\t\n\tid=request.vars.id\n\ttabla=\'in_producto\'\t\n\trow=db(db[tabla].categoria_id == id).select()\n\tlis_cat=[]\n\tfor row in row:\n\t\t#url=A(row.nombre,_href="#",_onclick="get_productos();")\n\t\tlis_cat.append(XML("<button onclick=\'fact_prod(this.id);\' class=\'btn btn-outline btn-default\' id=%s type=\'button\'>%s</button>" % (row.id,row.nombre) ) )\n\n\treturn DIV(lis_cat)\n\n\ndef get_fact_lines(fact_id):\t\t\n\texito=request.vars.exito\t\n\timporte=0.00\n\tiva=settings.impuesto\n\tmto_iva=0.00\t\n\ttotal=0.00\n\tlista=[]\n\t#Busco lo cobrado pra la factura\t\n\tsum = db.fc_cobro_det.monto.sum()\n\tcobrado=db(db.fc_cobro_det.factura_id==fact_id).select(sum).first()[sum]\t\n\tif cobrado==None:\n\t\tcobrado=0.00\n\n\tprueba="""\n\t<table id="mitabla" style=".selected{color:red;}" class="table" cellspacing="0" width="100%">\n        <thead>\n            <tr>\n            \t<th>Id</th>                \n                <th>Nombre</th>                \n                <th>Importe</th>                \n            </tr>\n        </thead>\n        <tfoot>\n            <tr>\n            \t<th></th>\n                <th>Importe</th>\n                <th>_IMP_</th>                \n            </tr>\n            <tr>\n            \t<th></th>\n                <th>Impuesto _IVA_% </th>\n                <th>_MTOIVA_</th>                \n            </tr>\n            <tr>\n            \t<th></th>\n                <th>Cobrado</th>\n                <th>_COB_</th>                \n            </tr>\n            <tr>\n            \t<th></th>\n                <th>Total</th>\n                <th>_TOT_</th>                \n            </tr>\n        </tfoot>\n \n        <tbody>\n        """\n\trow=db( (db.fc_factura_det.factura_id==fact_id) & (db.fc_factura_det.producto_id == db.in_producto.id) ).select()\n\tfor r in row:\n\t\timporte+=r.fc_factura_det.importe\n\t\tlista.append("<tr><td>"+str(r.fc_factura_det.id)+"</td><td>"+r.in_producto.nombre+"</td><td>"+str(r.fc_factura_det.importe)+"</td></tr>")\n\n\tmto_iva=importe*(iva/100)\n\ttotal=importe+mto_iva-cobrado\n\tprueba=prueba.replace(\'_COB_\',str(cobrado))\n\tprueba=prueba.replace(\'_MTOIVA_\',str(mto_iva))\n\tprueba=prueba.replace(\'_TOT_\',str(total))\n\tprueba=prueba.replace(\'_IVA_\',str(iva))\n\tprueba=prueba.replace(\'_IMP_\',str(importe))\n\n\n   \t#lista=["<tr><td>"+str(r.fc_factura_det.id)+"</td><td>"+r.in_producto.nombre+"</td><td>"+str(r.fc_factura_det.importe)+"</td></tr>" for row in row] \n\tprueba+="".join(lista)\n\tprueba+="</tbody></table>"\n\n\n\tif len(prueba)>0:\n\t\tmytabla=prueba\n\telse:\t\t\n\t\tmytabla=T("No existen registros")\n\t\n\treturn mytabla\n\ndef get_cb_lines(fact_id):\n\texito=request.vars.exito\t\n\tmonto=0.00\n\ttotal=0.00\n\tlista=[]\t\n\n\tprueba="""\n\t<table id="mitabla2" style=".selected{color:red;}" class="table" cellspacing="0" width="100%">\n        <thead>\n            <tr>\n            \t<th>Id</th>                \n                <th>Tipo</th>                \n                <th>Desc</th>                \n                <th>Monto</th>                \n            </tr>\n        </thead>\n        <tfoot>            \n        </tfoot>\n \n        <tbody>\n        """\n\trow=db( (db.fc_cobro_det.factura_id==fact_id) & (db.fc_cobro_det.forma_pago_id == db.fc_forma_pago.id) ).select()\n\tfor r in row:\n\t\tmonto+=r.fc_cobro_det.monto\n\t\tlista.append("<tr><td>"+str(r.fc_cobro_det.id)+"</td><td>"+ \n\t\t\t\t\tr.fc_forma_pago.nombre+"</td><td>"+r.fc_cobro_det.descripcion+\n\t\t\t\t\t"</td><td>"+str(r.fc_cobro_det.monto)+"</td></tr>")\n\n\t\n\ttotal=monto\t\n   \t\n\tprueba+="".join(lista)\n\tprueba+="</tbody></table>"\n\n\n\tif len(prueba)>0:\n\t\tmytabla=prueba\n\telse:\t\t\n\t\tmytabla=T("No existen registros")\n\t\n\treturn mytabla\n\n\ndef fact_prod():\n\tprodid = request.vars.prodid\n\tclteid = request.vars.clteid\n\tperid  = request.vars.perid\t\n\tfact_id = int(request.vars.fact_id)\n\t#si ya viene el numero de factura, es decir estoy insertando solo detalle \n\tif fact_id > 0:\t\t\n\t\tfacid=fact_id\n\t\tins=Factura()\n\t\tins.insertar_det(facid,prodid,perid)\n\telse:\t\t#ahora si no viene el numero de factura es un full isnserta fact y det\t\t\t\t\n\t\tins=Factura()\n\t\tfacid=ins.insertar_fact("Factura de venta","",0.00,0.00,clteid,perid,prodid)\n\n\t#obtnego la tabla con los datos actualizados\n\t#print facid\n\ttabla=get_fact_lines(facid)\n\treturn json.dumps({\'fact_id\':facid,\'tabla\':tabla})\n\ndef fact_del():\n\tfacid=request.vars.fact_id\n\tdele=Factura()\n\tfacid=dele.eliminar_fact(facid)\n\ttabla=get_fact_lines(facid)\n\n\treturn XML(tabla)\n\t\ndef det_del():\n\tdet_id=request.vars.det_id\n\trow=db(db.fc_factura_det.id == det_id).select()\n\tfacid=row[0].factura_id\n\n\tdele=Factura()\n\tdetid=dele.eliminar_det(det_id)\n\ttabla=get_fact_lines(facid)\n\n\treturn XML(tabla)\n\ndef fact_print():\n\timport os\n\tfacid=request.vars.fact_id\n\t#p.mono{font-family:"Courier New", Courier, monospace; font-size:8px;}\n\t#<p class="serif">\n\testilo="font-family:\'Courier New\', Courier, monospace; font-size:10px; width:300px; text-align:center;"\n\testilotbl="font-family:\'Courier New\', Courier, monospace; font-size:10px; width:300px;"\n\talgleft="text-align:left;"\n\talgright="text-align:right;"\n\tfc=Factura()\n\temp=db(db.cf_empresa.id > 0).select().first()\n\thead=fc.get_head(facid)\n\tlin=fc.get_lines(facid)\t\n\n\theadr=[]\n\theadr.append(DIV(emp.razon_social))\n\theadr.append(DIV("RIF: %s" % emp.rif))\t\n\theadr.append(DIV(emp.direccion or ""))\t\n\theadr.append(DIV("================================================="))\n\theadr.append(DIV(TABLE(TR("FACTURA#:",TD("000"+str(head.fc_factura.id) ,_style=algright )),\n\t\t\t\t\t\t  TR(TD("FECHA:"),TD(head.fc_factura.fecha,         _style=algright) ),\n\t\t\t\t\t\t   _style=estilotbl)))\n\theadr.append(DIV("================================================="))\n\theadr.append(DIV("DATOS DEL CLIENTE:", _style=algleft ))\n\theadr.append(DIV(head.cf_cliente.nombre, _style=algleft))\n\theadr.append(DIV("RIF: %s" % head.cf_cliente.rif , _style=algleft))\t\n\theadr.append(DIV("DIRECCION: %s" % head.cf_cliente.direccion or "" , _style=algleft))\t\n\theadr.append(DIV("================================================="))\n\t\n\t#lista para guardar datos de tablas\n\tbdy=[]\n\tline=[]\n\tfoot=[]\n\ttotal=[]\n\n\t#variable para rellenar\n\tmto=0.00\n\ttot=0.00\n\tiva=0.00\n\tmtoiva=0.00\n\n\tline.append(TR("COD","PROD",TD("MONTO",_style=algright)))\n\tfor ln in lin:\n\t\tline.append(TR(ln.in_producto.codigo,ln.in_producto.nombre,TD(ln.fc_factura_det.importe,_style=algright)))\n\t\tmto+=ln.fc_factura_det.importe\n\t\tmtoiva+=ln.fc_factura_det.impuesto\n\n\tbdy.append(TABLE(line,_style=estilotbl))\n\n\tfoot.append(DIV("================================================="))\n\n\n\ttotal.append(DIV(TABLE(TR("BASE:",TD(mto ,_style=algright )),\n\t\t\t\t\t\t  TR(TD("IVA: %s %%" % head.fc_factura.iva ),TD(mtoiva,_style=algright) ),\n\t\t\t\t\t\t  TR(TD("TOTAL:"),TD(mtoiva+mto,_style=algright) ),\n\t\t\t\t\t\t   _style=estilotbl)))\n\n\thtml=[]\n\thtml.append(DIV(headr))\n\thtml.append(DIV(bdy))\n\thtml.append(DIV(foot))\n\thtml.append(DIV(total))\n\thtml.append(DIV("================================================="))\n\thtml.append(DIV("gracias por su compra !"))\n\n\t#file=os.path.join(request.folder,\'static\',\'ticket.txt\')  \n\t#fo=open(file,"w")\n\t#fo.write(fact)\n\t#fo.close()\n\n\treturn DIV(html ,_style=estilo)\n\ndef add_cobro():\n\tfp_id = int(request.vars.id_fp)\n\tmonto_cobro = float(request.vars.monto_cobro)\n\tfact_id = int(request.vars.fact_id)\n\tref= request.vars.ref\n\tdesc= request.vars.desc\n\n\t#print type(fp_id),type(monto_cobro),type(fact_id),type(ref),type(desc),\n\t\n\tcb=Cobro()\n\tval=cb.insert(fp_id,fact_id,monto_cobro,ref,desc)\t\n\tif val:\n\t\ttabla=get_fact_lines(fact_id)\n\t\ttabla2=get_cb_lines(fact_id)\n\n\treturn json.dumps({\'row\':val,\'tabla\':tabla,\'tabla2\':tabla2})\n\ndef del_cobro():\n\tcob_id = int(request.vars.det_id)\n\tfact_id = int(request.vars.fact_id)\n\tcb=Cobro()\n\tval=cb.delete(cob_id)\t\n\tif val:\n\t\ttabla=get_fact_lines(fact_id)\n\t\ttabla2=get_cb_lines(fact_id)\n\n\treturn json.dumps({\'row\':val,\'tabla\':tabla,\'tabla2\':tabla2})\n\n\n\ndef error():\n    return dict()\n\ndef imprimir():\n# Let\'s import the wrapper\n\timport os\n\timport pdf\n\tfrom pdf.theme import colors, DefaultTheme\n\n\t# and define a constant\n\tTABLE_WIDTH = 540 # this you cannot do in rLab which is why I wrote the helper initially\n\n    # then let\'s extend the Default theme. I need more space so I redefine the margins\n    # also I don\'t want tables, etc to break across pages (allowSplitting = False)\n    # see http://www.reportlab.com/docs/reportlab-userguide.pdf\n\tclass MyTheme(DefaultTheme):\n\t\tdoc = {\n            \'leftMargin\': 25,\n            \'rightMargin\': 25,\n            \'topMargin\': 20,\n            \'bottomMargin\': 25,\n            \'allowSplitting\': False\n            }\n            \n    # let\'s create the doc and specify title and author\n\tdoc = pdf.Pdf(\'Categorias de Producto\', \'wuelfhis asuaje\')\n\n    # now we apply our theme\n\tdoc.set_theme(MyTheme)\n\n    # time to add the logo at the top right\n\t#logo_path = os.path.join(request.folder,\'static/images\',\'facebook.png\')   \n\t#doc.add_image(logo_path, 67, 67, pdf.LEFT)\n\tlogo=pdf.Image(os.path.join(request.folder,\'static/images\',\'facebook.png\')   )\n\taddress = pdf.Paragraph("<para align=left> We are please%s </para>" % "Hola",MyTheme.paragraph)\n\tLIST_STYLE = [(\n\t\t\t\'LINEABOVE\', (0,0), (-1,0), 2, colors.grey),\n\t\t\t(\'LINEABOVE\', (0,1), (-1,-1), 0.25, colors.black),\n\t\t\t(\'LINEBELOW\', (0,0), (-1,-1), 2, colors.grey),\n\t\t\t(\'ALIGN\', (0,0), (0,0),\'LEFT\'),\t\t\t\n\t\t\t\n\t\t\t]\n\t\t\t\n\t\n\tdoc.add(pdf.Table([[logo,address,"","","",""]],style=LIST_STYLE ))\n\n    # give me some space\n\tdoc.add_spacer()\n    \n    # this header defaults to H1\n\tdoc.add_header(\'Categorias de producto\')\n\n    # here\'s how to add a paragraph\n\t#doc.add_paragraph("We are pleased to confirm your reservation with ...")\n\tdoc.add_spacer()\t\n\n\t# let\'s move on to the divers table\n\n\tdiver_table = [[\'Id\', \'Codigo\', \'Nombre\']] # this is the header row \n\n\tfor row in db(db.in_categoria.id>0).select() :   \n\t\tdiver_table.append([row.id, row.codigo, row.nombre]) # these are the other rows\n\n\tdoc.add_table(diver_table, TABLE_WIDTH)\n\t\n\tresponse.headers[\'Content-Type\']=\'application/pdf\'\n\t\n\treturn doc.render()\nresponse._vars=response._caller(fact_print)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/wasuaje/Documentos/desarrollo/web2py6/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/wasuaje/Documentos/desarrollo/web2py6/applications/pysalon/controllers/pos.py", line 402, in <module>\n  File "/home/wasuaje/Documentos/desarrollo/web2py6/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/wasuaje/Documentos/desarrollo/web2py6/applications/pysalon/controllers/pos.py", line 243, in fact_print\n    head=fc.get_head(facid)\n  File "/home/wasuaje/Documentos/desarrollo/web2py6/applications/pysalon/models/db.py", line 406, in get_head\n    row=db( (db.fc_factura.id == fact_id) & (db.fc_factura.cliente_id == db.cf_cliente.id) ).select()\n  File "/home/wasuaje/Documentos/desarrollo/web2py6/gluon/dal.py", line 10525, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/wasuaje/Documentos/desarrollo/web2py6/gluon/dal.py", line 2458, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/wasuaje/Documentos/desarrollo/web2py6/gluon/dal.py", line 1869, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/wasuaje/Documentos/desarrollo/web2py6/gluon/dal.py", line 1774, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/wasuaje/Documentos/desarrollo/web2py6/gluon/dal.py", line 1541, in expand\n    out = op(first, second, **optional_args)\n  File "/home/wasuaje/Documentos/desarrollo/web2py6/gluon/dal.py", line 1381, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/home/wasuaje/Documentos/desarrollo/web2py6/gluon/dal.py", line 1541, in expand\n    out = op(first, second, **optional_args)\n  File "/home/wasuaje/Documentos/desarrollo/web2py6/gluon/dal.py", line 1438, in EQ\n    self.expand(second, first.type))\n  File "/home/wasuaje/Documentos/desarrollo/web2py6/gluon/dal.py", line 1552, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/wasuaje/Documentos/desarrollo/web2py6/gluon/dal.py", line 2007, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'94http://localhost:8000/pysalon/pos/det_del?det_id=217\'\n'
p11
s.